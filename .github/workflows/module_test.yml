name: F5XC Azure VNET Hub and Spoke Peering module
on: push
jobs:
  f5-xc-azure-hub-spoke-peering-module-validate:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository and submodules
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
          submodules: recursive
      - name: Checkout support repo
        uses: actions/checkout@v3
        with:
          repository: cklewar/f5-xc-cert
          path: f5-xc-cert
          token: ${{ secrets.GH_PAT }}
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}
      - name: List files in the cert repository
        run: |
          ls -la ${{ github.workspace }}/f5-xc-cert
      - name: Setup environment
        id: setup_env
        run: |
          cp main.tf.example main.tf
          cp variables.tf.example variables.tf
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
  f5-xc-azure-hub-spoke-peering-module-plan:
    runs-on: ubuntu-latest
    needs: [ f5-xc-azure-hub-spoke-peering-module-validate ]
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository and submodules
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Checkout support repo
        uses: actions/checkout@v3
        with:
          repository: cklewar/f5-xc-cert
          path: f5-xc-cert
          token: ${{ secrets.GH_PAT }}
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}
      - name: List files in the cert repository
        run: |
          ls -la ${{ github.workspace }}/f5-xc-cert
      - name: Setup environment
        id: setup_env
        run: |
          cp main.tf.example main.tf
          cp variables.tf.example variables.tf
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run: terraform init
      - name: Terraform Plan
        id: plan
        env:
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.f5xc_api_url }}
          TF_VAR_f5xc_api_p12_file: ${{ secrets.f5xc_api_p12_file }}
          TF_VAR_f5xc_api_token: ${{ secrets.f5xc_api_token }}
          TF_VAR_f5xc_tenant: ${{ secrets.f5xc_tenant }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform plan -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
          rm variables.tf
      - run: echo "This job's status is ${{ job.status }}."
  f5-xc-azure-hub-spoke-peering-module-apply:
    runs-on: ubuntu-latest
    needs: [ f5-xc-azure-hub-spoke-peering-module-plan ]
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository and submodules
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Checkout support repo
        uses: actions/checkout@v3
        with:
          repository: cklewar/f5-xc-cert
          path: f5-xc-cert
          token: ${{ secrets.GH_PAT }}
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}
      - name: List files in the cert repository
        run: |
          ls -la ${{ github.workspace }}/f5-xc-cert
      - name: Setup environment
        id: setup_env
        run: |
          cp main.tf.example main.tf
          cp variables.tf.example variables.tf
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run: terraform init
      - name: Run Azure marketplace agreements
        id: az_agreements
        env:
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.f5xc_api_url }}
          TF_VAR_f5xc_api_p12_file: ${{ secrets.f5xc_api_p12_file }}
          TF_VAR_f5xc_tenant: ${{ secrets.f5xc_tenant }}
          TF_VAR_f5xc_api_token: ${{ secrets.f5xc_api_token }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          # terraform import module.f5xc_azure_marketplace_agreement_app_stack.azurerm_marketplace_agreement.f5xc_azure_ce /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.MarketplaceOrdering/agreements/volterraedgeservices/offers/entcloud_voltmesh_voltstack_node/plans/freeplan_entcloud_voltmesh_voltstack_node
          terraform import module.f5xc_azure_marketplace_agreement_hub_multi_nic.azurerm_marketplace_agreement.f5xc_azure_ce /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.MarketplaceOrdering/agreements/volterraedgeservices/offers/entcloud_voltmesh_voltstack_node/plans/freeplan_entcloud_voltmesh_voltstack_node_multinic
          # terraform import module.f5xc_azure_marketplace_agreement_spoke_single_nic.azurerm_marketplace_agreement.f5xc_azure_ce /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.MarketplaceOrdering/agreements/volterraedgeservices/offers/volterra-node/plans/volterra-node
      - name: Terraform Apply
        id: apply
        env:
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.f5xc_api_url }}
          TF_VAR_f5xc_api_p12_file: ${{ secrets.f5xc_api_p12_file }}
          TF_VAR_f5xc_tenant: ${{ secrets.f5xc_tenant }}
          TF_VAR_f5xc_api_token: ${{ secrets.f5xc_api_token }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
          rm variables.tf
      - run: echo "This job's status is ${{ job.status }}."
  f5-xc-azure-hub-spoke-peering-module-destroy:
    runs-on: ubuntu-latest
    needs: [ f5-xc-azure-hub-spoke-peering-module-apply ]
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository and submodules
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Checkout support repo
        uses: actions/checkout@v3
        with:
          repository: cklewar/f5-xc-cert
          path: f5-xc-cert
          token: ${{ secrets.GH_PAT }}
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}
      - name: List files in the cert repository
        run: |
          ls -la ${{ github.workspace }}/f5-xc-cert
      - name: Setup environment
        id: setup_env
        run: |
          cp main.tf.example main.tf
          cp variables.tf.example variables.tf
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run: terraform init
      - name: Terraform Destroy
        id: destroy
        env:
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.f5xc_api_url }}
          TF_VAR_f5xc_api_p12_file: ${{ secrets.f5xc_api_p12_file }}
          TF_VAR_f5xc_tenant: ${{ secrets.f5xc_tenant }}
          TF_VAR_f5xc_api_token: ${{ secrets.f5xc_api_token }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform destroy -auto-approve -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
          rm variables.tf
      - run: echo "This job's status is ${{ job.status }}."